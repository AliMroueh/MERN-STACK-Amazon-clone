    
    in package.json
    
    // jsonwebtoken is to generate token token is used to encrypt user data in a string for the next request like update data 
    "jsonwebtoken": "^8.5.1",

        // dotenv is to secure the token
    "dotenv": "^10.0.0",

     "multer": "^1.4.3" 
     Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.

    NOTE: Multer will not process any form which is not multipart (multipart/form-data).

    The express.Router() : function is used to create a new router object. This function is used when you want to create a new router object in your program to handle requests.

    in uploadRouter.js file : 

    diskStorage in multer : The disk storage engine gives you full control on storing files to disk.

    There are two options available, destination and filename. They are both functions that determine where the file should be stored.

    destination is used to determine within which folder the uploaded files should be stored. This can also be given as a string (e.g. '/tmp/uploads'). If no destination is given, the operating system’s default directory for temporary files is used.

    Note: You are responsible for creating the directory when providing destination as a function. When passing a string, multer will make sure that the directory is created for you.

    filename is used to determine what the file should be named inside the folder. If no filename is given, each file will be given a random name that doesn’t include any file extension.

    Note: Multer will not append any file extension for you, your function should return a filename complete with an file extension.

    Each function gets passed both the request (req) and some information about the file (file) to aid with the decision.

    Note that req.body might not have been fully populated yet. It depends on the order that the client transmits fields and files to the server.

    For understanding the calling convention used in the callback (needing to pass null as the first param), refer to Node.js error handling

    upload.single('image') is Multer middleware. It means we accept a single file with the field name image. File upload will be handled by Multer.

    To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express.

    The function signature is:

    express.static(root, [options])

    For example, use the following code to serve images, CSS files, and JavaScript files in a directory named public:

    app.use(express.static('public'))
    Now, you can load the files that are in the public directory:

    http://localhost:3000/images/kitten.jpg
    http://localhost:3000/css/style.css
    http://localhost:3000/js/app.js
    http://localhost:3000/images/bg.png
    http://localhost:3000/hello.html

    To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the express.static function, specify a mount path for the static directory, as shown below:

    app.use('/static', express.static('public'))
    Now, you can load the files that are in the public directory from the /static path prefix.

    http://localhost:3000/static/images/kitten.jpg
    http://localhost:3000/static/css/style.css
    http://localhost:3000/static/js/app.js
    http://localhost:3000/static/images/bg.png
    http://localhost:3000/static/hello.html
    However, the path that you provide to the express.static function is relative to the directory from where you launch your node process. If you run the express app from another directory, it’s safer to use the absolute path of the directory that you want to serve:

    const path = require('path')
    app.use('/static', express.static(path.join(__dirname, 'public')))

    important generall Note : {{{{{{{{{{
    A route will match any path that follows its path immediately with a “/”. For example: app.use('/apple', ...) will match “/apple”, “/apple/images”, “/apple/images/news”, and so on.

    Since path defaults to “/”, middleware mounted without a path will be executed for every request to the app.
    For example, this middleware function will be executed for every request to the app:

    app.use(function (req, res, next) {
    console.log('Time: %d', Date.now())
    next()
    })
    }}}}}}}}}}

    The following line creates an empty FormData object:

    var formData = new FormData(); // Currently empty
    Copy to Clipboard
    You could add a key/value pair to this using FormData.append:

    formData.append('username', 'Chris');